// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ProjetoPingUDP.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class ExecucaoDePingFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ExecucaoPing.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-BR"), "Execução de Ping", "Para verificar o estado da minha rede\r\nEnquanto um administrador de redes\r\nEu que" +
                    "ro verificar o estado da rede entre o cliente e o servidor", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Execução de Ping")))
            {
                ProjetoPingUDP.Specs.ExecucaoDePingFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execução de Ping com Sucesso")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Execução de Ping")]
        public virtual void ExecucaoDePingComSucesso()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execução de Ping com Sucesso", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("que informei 192.168.200.18 como IP do destino");
#line 10
 testRunner.And("que informei 8523 como porta do destino");
#line 11
 testRunner.And("que informei 4 como número de pacotes");
#line 12
    testRunner.And("que informei 8523 como porta do servidor");
#line 13
 testRunner.And("que o servidor de Ping está ativo");
#line 14
 testRunner.When("eu clicar em \"Executar Ping\"");
#line 15
 testRunner.Then("o pacote Ping deverá ser executado");
#line 16
 testRunner.And("deverei receber o resultado do Ping com as estatísticas da rede");
#line 17
 testRunner.And("o resultado deve conter pelo menos 1 pacote(s) respondido(s)");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Execução de Ping Sem Resposta")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Execução de Ping")]
        public virtual void ExecucaoDePingSemResposta()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Execução de Ping Sem Resposta", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("que informei 1.1.1.1 como IP do destino");
#line 21
 testRunner.And("que informei 8524 como porta do destino");
#line 22
 testRunner.And("que informei 4 como número de pacotes");
#line 23
 testRunner.When("eu clicar em \"Executar Ping\"");
#line 24
 testRunner.Then("o pacote Ping deverá ser executado");
#line 25
 testRunner.And("deverei receber o resultado do Ping com as estatísticas da rede");
#line 26
 testRunner.And("o resultado deve conter pelo menos 4 pacote(s) perdido(s)");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
